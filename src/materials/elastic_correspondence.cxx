//! \file elastic_correspondence.cxx

//@HEADER
// ************************************************************************
//
//                             Peridigm
//                 Copyright (2011) Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions?
// David J. Littlewood   djlittl@sandia.gov
// John A. Mitchell      jamitch@sandia.gov
// Michael L. Parks      mlparks@sandia.gov
// Stewart A. Silling    sasilli@sandia.gov
//
// ************************************************************************
//@HEADER

#include "elastic_correspondence.h"
#include "correspondence.h"
#include "material_utilities.h"
#include <Sacado.hpp>
#include <cmath> 

//#include <Teuchos_Assert.hpp>
//#include <Epetra_SerialComm.h>


using namespace std;
namespace CORRESPONDENCE {



template<typename ScalarT>
void updateElasticCauchyStress
(
const ScalarT* unrotatedRateOfDeformation, 
const ScalarT* unrotatedCauchyStressN, 
ScalarT* unrotatedCauchyStressNP1, 
const int numPoints, 
const double bulkMod,
const double shearMod,
const double dt
)
{
  // Hooke's law
  const ScalarT* rateOfDef = unrotatedRateOfDeformation;
  const ScalarT* sigmaN = unrotatedCauchyStressN;
  ScalarT* sigmaNP1 = unrotatedCauchyStressNP1;

  ScalarT dilatationInc;
  ScalarT strainInc[9];
  ScalarT deviatoricStrainInc[9];

  for(int iID=0 ; iID<numPoints ; ++iID, 
        rateOfDef+=9, sigmaN+=9, sigmaNP1+=9){

      //strainInc = dt * rateOfDef
      for (int i = 0; i < 9; i++) {
          strainInc[i] = *(rateOfDef+i)*dt;
          deviatoricStrainInc[i] = strainInc[i];
      }

      //dilatation
      dilatationInc = strainInc[0] + strainInc[4] + strainInc[8];

      //deviatoric strain
      deviatoricStrainInc[0] -= dilatationInc/3.0;
      deviatoricStrainInc[4] -= dilatationInc/3.0;
      deviatoricStrainInc[8] -= dilatationInc/3.0;

      //update stress
      for (int i = 0; i < 9; i++) {
          *(sigmaNP1+i) = *(sigmaN+i) + deviatoricStrainInc[i]*2.0*shearMod;
      }
      *(sigmaNP1) += bulkMod*dilatationInc;
      *(sigmaNP1+4) += bulkMod*dilatationInc;
      *(sigmaNP1+8) += bulkMod*dilatationInc;

  }
}

// Explicit template instantiation for double
template void updateElasticCauchyStress<double>
(
const double* unrotatedRateOfDeformation, 
const double* unrotatedCauchyStressN, 
double* unrotatedCauchyStressNP1, 
int numPoints, 
double bulkMod,
double shearMod,
double dt
);

/** Explicit template instantiation for Sacado::Fad::DFad<double>. */




template<typename ScalarT>
void updateElasticCauchyStressSmallDef
(
ScalarT* DeformationGradient, 
ScalarT* unrotatedCauchyStressN, 
ScalarT* unrotatedCauchyStressNP1, 
int numPoints, 
const ScalarT Cstiff[][6],
double* angles,
int type,
double dt,
bool incremental
)
{
  // Hooke's law
  const ScalarT* defGrad = DeformationGradient;
  const ScalarT* sigmaN = unrotatedCauchyStressN;
  ScalarT* sigmaNP1 = unrotatedCauchyStressNP1;
  
  ScalarT strain[9];
  ScalarT C[6][6];
  ScalarT rotationMat[3][3], rotationMatX[3][3], rotationMatY[3][3], rotationMatZ[3][3], temp[3][3];
  double alpha[3];

  // 0 -> xx,  1 -> xy, 2 -> xz
  // 3 -> yx,  4 -> yy, 5 -> yz
  // 6 -> zx,  7 -> zy, 8 -> zz


  for(int iID=0 ; iID<numPoints ; ++iID, 
        defGrad+=9, sigmaNP1+=9, sigmaN+=9){
            // df muss genutzt werden EQ 34 Silling Stability --> d.h. ich muss das Delta bestimmen
            // Schadensmodell muss angepasst werden
            // Referenzkonfiguration muss angepasst werden
            // volle C Matrix muss hier rein
      alpha[0] = angles[3*iID  ];
      alpha[1] = angles[3*iID+1];
      alpha[2] = angles[3*iID+2];
      //CORRESPONDENCE::createRotatedPythonBasedStiff(Cstiff,alpha,C); 
      //if (type != 0){
      //  // rotation mathematical positive sense (downwards from x-axis)
        CORRESPONDENCE::createRotationMatrix(angles[3*iID  ],rotationMatX,0);
        CORRESPONDENCE::createRotationMatrix(angles[3*iID+1],rotationMatY,1);
        CORRESPONDENCE::createRotationMatrix(angles[3*iID+2],rotationMatZ,2);
        CORRESPONDENCE::MatrixMultiply3x3(rotationMatX, rotationMatY, temp);
        CORRESPONDENCE::MatrixMultiply3x3(temp, rotationMatZ, rotationMat);
        CORRESPONDENCE::createRotatedStiff(Cstiff,rotationMat,C);
      //
      //}
      //else{
      //  C[0][0] = Cstiff[0][0];C[1][0] = Cstiff[1][0];C[2][0] = Cstiff[2][0];C[3][0] = Cstiff[3][0];C[4][0] = Cstiff[4][0];C[5][0] = Cstiff[5][0];
      //  C[0][1] = Cstiff[0][1];C[1][1] = Cstiff[1][1];C[2][1] = Cstiff[2][1];C[3][1] = Cstiff[3][1];C[4][1] = Cstiff[4][1];C[5][1] = Cstiff[5][1];
      //  C[0][2] = Cstiff[0][2];C[1][2] = Cstiff[1][2];C[2][2] = Cstiff[2][2];C[3][2] = Cstiff[3][2];C[4][2] = Cstiff[4][2];C[5][2] = Cstiff[5][2];
      //  C[0][3] = Cstiff[0][3];C[1][3] = Cstiff[1][3];C[2][3] = Cstiff[2][3];C[3][3] = Cstiff[3][3];C[4][3] = Cstiff[4][3];C[5][3] = Cstiff[5][3];
      //  C[0][4] = Cstiff[0][4];C[1][4] = Cstiff[1][4];C[2][4] = Cstiff[2][4];C[3][4] = Cstiff[3][4];C[4][4] = Cstiff[4][4];C[5][4] = Cstiff[5][4];
      //  C[0][5] = Cstiff[0][5];C[1][5] = Cstiff[1][5];C[2][5] = Cstiff[2][5];C[3][5] = Cstiff[3][5];C[4][5] = Cstiff[4][5];C[5][5] = Cstiff[5][5];
      //}
      if (type==0){
        strain[0] = 0.5 * ( *(defGrad)*   *(defGrad)   + *(defGrad+1)* *(defGrad+3) + *(defGrad+2) * *(defGrad+6)  - 1.0 );
        strain[1] = 0.5 * ( *(defGrad)*   *(defGrad+1) + *(defGrad+1)* *(defGrad+4) + *(defGrad+2) * *(defGrad+7)  );
        strain[2] = 0.5 * ( *(defGrad)*   *(defGrad+2) + *(defGrad+1)* *(defGrad+5) + *(defGrad+2) * *(defGrad+8)  );
        strain[3] = 0.5 * ( *(defGrad+3)* *(defGrad)   + *(defGrad+4)* *(defGrad+3) + *(defGrad+5) * *(defGrad+6)  );
        strain[4] = 0.5 * ( *(defGrad+3)* *(defGrad+1) + *(defGrad+4)* *(defGrad+4) + *(defGrad+5) * *(defGrad+7)  - 1.0 );
        strain[5] = 0.5 * ( *(defGrad+3)* *(defGrad+2) + *(defGrad+4)* *(defGrad+5) + *(defGrad+5) * *(defGrad+8)  );
        strain[6] = 0.5 * ( *(defGrad+6)* *(defGrad)   + *(defGrad+7)* *(defGrad+3) + *(defGrad+8) * *(defGrad+6)  );
        strain[7] = 0.5 * ( *(defGrad+6)* *(defGrad+1) + *(defGrad+7)* *(defGrad+4) + *(defGrad+8) * *(defGrad+7)  );
        strain[8] = 0.5 * ( *(defGrad+6)* *(defGrad+2) + *(defGrad+7)* *(defGrad+5) + *(defGrad+8) * *(defGrad+8)  - 1.0 );
        
        *(sigmaNP1)   = C[0][0]*strain[0] + C[0][1]*strain[4] + C[0][2]*strain[8] + C[0][3]*(strain[5]+strain[7]) + C[0][4]*(strain[2]+strain[6]) + C[0][5]*(strain[1]+strain[3]);
        *(sigmaNP1+1) = C[5][0]*strain[0] + C[5][1]*strain[4] + C[5][2]*strain[8] + C[5][3]*(strain[5]+strain[7]) + C[5][4]*(strain[2]+strain[6]) + C[5][5]*(strain[1]+strain[3]);
        *(sigmaNP1+2) = C[4][0]*strain[0] + C[4][1]*strain[4] + C[4][2]*strain[8] + C[4][3]*(strain[5]+strain[7]) + C[4][4]*(strain[2]+strain[6]) + C[4][5]*(strain[1]+strain[3]);
        *(sigmaNP1+3) = *(sigmaNP1+1);
        *(sigmaNP1+4) = C[1][0]*strain[0] + C[1][1]*strain[4] + C[1][2]*strain[8] + C[1][3]*(strain[5]+strain[7]) + C[1][4]*(strain[2]+strain[6]) + C[1][5]*(strain[1]+strain[3]);
        *(sigmaNP1+5) = C[3][0]*strain[0] + C[3][1]*strain[4] + C[3][2]*strain[8] + C[3][3]*(strain[5]+strain[7]) + C[3][4]*(strain[2]+strain[6]) + C[3][5]*(strain[1]+strain[3]);
        *(sigmaNP1+6) = *(sigmaNP1+2);
        *(sigmaNP1+7) = *(sigmaNP1+5);
        *(sigmaNP1+8) =  C[2][0]*strain[0] + C[2][1]*strain[4] + C[2][2]*strain[8] + C[2][3]*(strain[5]+strain[7]) + C[2][4]*(strain[2]+strain[6]) + C[2][5]*(strain[1]+strain[3]);
        
      }
      if (type!=0){
        strain[0] = 0.5 * ( *(defGrad)*   *(defGrad)   + *(defGrad+1)* *(defGrad+3) - 1.0 );
        strain[1] = 0.5 * ( *(defGrad)*   *(defGrad+1) + *(defGrad+1)* *(defGrad+4) );
        strain[3] = 0.5 * ( *(defGrad+3)* *(defGrad)   + *(defGrad+4)* *(defGrad+3) );
        strain[4] = 0.5 * ( *(defGrad+3)* *(defGrad+1) + *(defGrad+4)* *(defGrad+4) +   - 1.0 );

        *(sigmaNP1)   = C[0][0]*strain[0] + C[0][1]*strain[4] + C[0][5]*(strain[1]+strain[3]);
        *(sigmaNP1+1) = C[5][0]*strain[0] + C[5][1]*strain[4] + C[5][5]*(strain[1]+strain[3]);

        *(sigmaNP1+2) = 0.0;

        *(sigmaNP1+3) = *(sigmaNP1+1);
        *(sigmaNP1+4) = C[1][0] *strain[0] + C[1][1]* strain[4] + C[1][5]*(strain[1]+strain[3]);
        *(sigmaNP1+5) = 0.0;
        *(sigmaNP1+6) = 0.0;
        *(sigmaNP1+7) = 0.0;
        *(sigmaNP1+8) = 0.0;

        if (*(sigmaNP1) !=*(sigmaNP1) )
        {
           std::cout << " strain[0]: " << strain[0] << " strain[1]: " << strain[1] << " strain[3]: " << strain[3] << " strain[4]: " << strain[4] <<std::endl;
           std::cout << " *(defGrad): " << *(defGrad) << " *(defGrad+1): " << *(defGrad+1) << " *(defGrad+3): " << *(defGrad+3) << " *(defGrad+4): " << *(defGrad+4) <<std::endl;
        }

      }
      //if (incremental == true){
      //   for (int i = 0; i < 9; i++) {
      //        *(sigmaNP1+i) += *(sigmaN+i);
      //    }
      //}
  }     
}       


// Explicit template instantiation for double
template void updateElasticCauchyStressSmallDef<double>
(
double* DeformationGradient, 
double* unrotatedCauchyStressN, 
double* unrotatedCauchyStressNP1, 
int numPoints, 
const double Cstiff[][6],
double* angles,
int type,
double dt,
bool incremental
);
template void updateElasticCauchyStressSmallDef<Sacado::Fad::DFad<double> >
(
Sacado::Fad::DFad<double>* DeformationGradient, 
Sacado::Fad::DFad<double>* unrotatedCauchyStressN, 
Sacado::Fad::DFad<double>* unrotatedCauchyStressNP1, 
int numPoints, 
const Sacado::Fad::DFad<double> Cstiff[][6],
double* angles,
int type,
double dt,
bool incremental
);



/** Explicit template instantiation for Sacado::Fad::DFad<double>. */
template<typename ScalarT>
void createRotationMatrix
(
const double alpha,
ScalarT rotMat[][3],
const int check
){
    const double PI  = 3.141592653589793238463;
    double rad = alpha*(PI)/180;
    
    
    
    if (check == 0){// x - direction
        rotMat[0][0] = 1; rotMat[0][1] = 0;        rotMat[0][2] = 0;
        rotMat[1][0] = 0; rotMat[1][1] = cos(rad); rotMat[1][2] = -sin(rad);
        rotMat[2][0] = 0; rotMat[2][1] = sin(rad); rotMat[2][2] =  cos(rad);
    }
    if (check == 1){// y - direction
        rotMat[0][0] =  cos(rad); rotMat[0][1] = 0; rotMat[0][2] = sin(rad);
        rotMat[1][0] = 0;         rotMat[1][1] = 1; rotMat[1][2] = 0;
        rotMat[2][0] = -sin(rad); rotMat[2][1] = 0; rotMat[2][2] = cos(rad);
    }
    if (check == 2){// z - direction
        rotMat[0][0] = cos(rad); rotMat[0][1] = -sin(rad); rotMat[0][2] = 0;
        rotMat[1][0] = sin(rad); rotMat[1][1] =  cos(rad); rotMat[1][2] = 0;
        rotMat[2][0] = 0;        rotMat[2][1] = 0;         rotMat[2][2] = 1;

    }
}


//// Explicit template instantiation for double
template void createRotationMatrix<double>
(
const double alpha,
double rotMat[][3],
const int check
);
template void createRotationMatrix<Sacado::Fad::DFad<double> >
(
const double alpha,
Sacado::Fad::DFad<double> rotMat[][3],
const int check
);



/** Explicit template instantiation for Sacado::Fad::DFad<double>. */
template<typename ScalarT>
void createRotatedStiff
(
const ScalarT C[][6],
const ScalarT rotMat[][3],
ScalarT Cnew[][6]
){
    
     //  rM[0,0]**2     , rM[0,1]**2     , rM[0,2]**2     , 2.*rM[0,1]*rM[0,2]             , 2.*rM[0,0]*rM[0,2]             , 2.*rM[0,0]*rM[0,1]              ],
     //[ rM[1,0]**2     , rM[1,1]**2     , rM[1,2]**2     , 2.*rM[1,1]*rM[1,2]             , 2.*rM[1,0]*rM[1,2]             , 2.*rM[1,0]*rM[1,1]              ],
     //[ rM[2,0]**2     , rM[2,1]**2     , rM[2,2]**2     , 2.*rM[2,1]*rM[2,2]             , 2.*rM[2,0]*rM[2,2]             , 2.*rM[2,0]*rM[2,1]              ],
     //[ rM[1,0]*rM[2,0], rM[1,1]*rM[2,1], rM[1,2]*rM[2,2], rM[1,1]*rM[2,2]+rM[1,2]*rM[2,1], rM[1,0]*rM[2,2]+rM[1,2]*rM[2,0], rM[1,0]*rM[2,1]+rM[1,1]*rM[2,0] ],
     //[ rM[0,0]*rM[2,0], rM[0,1]*rM[2,1], rM[0,2]*rM[2,2], rM[0,1]*rM[2,2]+rM[0,2]*rM[2,1], rM[0,0]*rM[2,2]+rM[0,2]*rM[2,0], rM[0,0]*rM[2,1]+rM[0,1]*rM[2,0] ],
     //[ rM[0,0]*rM[1,0], rM[0,1]*rM[1,1], rM[0,2]*rM[1,2], rM[0,1]*rM[1,2]+rM[0,2]*rM[1,1], rM[0,0]*rM[1,2]+rM[0,2]*rM[1,0], rM[0,0]*rM[1,1]+rM[0,1]*rM[1,0] ],
     //])
    
    
    ScalarT tm[6][6];
    bool GlobToLoc = false; 
    if (GlobToLoc){
    
        tm[0][0] = rotMat[0][0]*rotMat[0][0]; tm[0][1] = rotMat[0][1]*rotMat[0][1]; tm[0][2] = rotMat[0][2]*rotMat[0][2]; tm[0][3] = 2*rotMat[0][1]*rotMat[0][2]; tm[0][4] = 2*rotMat[0][0]*rotMat[0][2]; tm[0][5] = 2*rotMat[0][0]*rotMat[0][1];
        tm[1][0] = rotMat[1][0]*rotMat[1][0]; tm[1][1] = rotMat[1][1]*rotMat[1][1]; tm[1][2] = rotMat[1][2]*rotMat[1][2]; tm[1][3] = 2*rotMat[1][1]*rotMat[1][2]; tm[1][4] = 2*rotMat[1][0]*rotMat[1][2]; tm[1][5] = 2*rotMat[1][0]*rotMat[1][1];  
        tm[2][0] = rotMat[2][0]*rotMat[2][0]; tm[2][1] = rotMat[2][1]*rotMat[2][1]; tm[2][2] = rotMat[2][2]*rotMat[2][2]; tm[2][3] = 2*rotMat[2][1]*rotMat[2][2]; tm[2][4] = 2*rotMat[2][0]*rotMat[2][2]; tm[2][5] = 2*rotMat[2][0]*rotMat[2][1];
        tm[3][0] = rotMat[1][0]*rotMat[2][0]; tm[3][1] = rotMat[1][1]*rotMat[2][1]; tm[3][2] = rotMat[1][2]*rotMat[2][2]; tm[3][3] = rotMat[1][1]*rotMat[2][2]+rotMat[1][2]*rotMat[2][1]; tm[3][4] = rotMat[1][0]*rotMat[2][2]+rotMat[1][2]*rotMat[2][0]; tm[3][5] =rotMat[1][0]*rotMat[2][1]+rotMat[1][1]*rotMat[2][0];
        tm[4][0] = rotMat[0][0]*rotMat[2][0]; tm[4][1] = rotMat[0][1]*rotMat[2][1]; tm[4][2] = rotMat[0][2]*rotMat[2][2]; tm[4][3] = rotMat[0][1]*rotMat[2][2]+rotMat[0][2]*rotMat[2][1]; tm[4][4] = rotMat[0][0]*rotMat[2][2]+rotMat[0][2]*rotMat[2][0]; tm[4][5] =rotMat[0][0]*rotMat[2][1]+rotMat[0][1]*rotMat[2][0];
        tm[5][0] = rotMat[0][0]*rotMat[1][0]; tm[5][1] = rotMat[0][1]*rotMat[1][1]; tm[5][2] = rotMat[0][2]*rotMat[1][2]; tm[5][3] = rotMat[0][1]*rotMat[1][2]+rotMat[0][2]*rotMat[1][1]; tm[5][4] = rotMat[0][0]*rotMat[1][2]+rotMat[0][2]*rotMat[1][0]; tm[5][5] =rotMat[0][0]*rotMat[1][1]+rotMat[0][1]*rotMat[1][0];
    }
    else{
        tm[0][0] = rotMat[0][0]*rotMat[0][0];   tm[0][1] = rotMat[0][1]*rotMat[0][1];   tm[0][2] = rotMat[0][2]*rotMat[0][2];   tm[0][3] = rotMat[0][1]*rotMat[0][2]; tm[0][4] = rotMat[0][0]*rotMat[0][2]; tm[0][5] = rotMat[0][0]*rotMat[0][1];
        tm[1][0] = rotMat[1][0]*rotMat[1][0];   tm[1][1] = rotMat[1][1]*rotMat[1][1];   tm[1][2] = rotMat[1][2]*rotMat[1][2];   tm[1][3] = rotMat[1][1]*rotMat[1][2]; tm[1][4] = rotMat[1][0]*rotMat[1][2]; tm[1][5] = rotMat[1][0]*rotMat[1][1];  
        tm[2][0] = rotMat[2][0]*rotMat[2][0];   tm[2][1] = rotMat[2][1]*rotMat[2][1];   tm[2][2] = rotMat[2][2]*rotMat[2][2];   tm[2][3] = rotMat[2][1]*rotMat[2][2]; tm[2][4] = rotMat[2][0]*rotMat[2][2]; tm[2][5] = rotMat[2][0]*rotMat[2][1];
        tm[3][0] = 2*rotMat[1][0]*rotMat[2][0]; tm[3][1] = 2*rotMat[1][1]*rotMat[2][1]; tm[3][2] = 2*rotMat[1][2]*rotMat[2][2]; tm[3][3] = rotMat[1][1]*rotMat[2][2]+rotMat[1][2]*rotMat[2][1]; tm[3][4] = rotMat[1][0]*rotMat[2][2]+rotMat[1][2]*rotMat[2][0]; tm[3][5] =rotMat[1][0]*rotMat[2][1]+rotMat[1][1]*rotMat[2][0];
        tm[4][0] = 2*rotMat[0][0]*rotMat[2][0]; tm[4][1] = 2*rotMat[0][1]*rotMat[2][1]; tm[4][2] = 2*rotMat[0][2]*rotMat[2][2]; tm[4][3] = rotMat[0][1]*rotMat[2][2]+rotMat[0][2]*rotMat[2][1]; tm[4][4] = rotMat[0][0]*rotMat[2][2]+rotMat[0][2]*rotMat[2][0]; tm[4][5] =rotMat[0][0]*rotMat[2][1]+rotMat[0][1]*rotMat[2][0];
        tm[5][0] = 2*rotMat[0][0]*rotMat[1][0]; tm[5][1] = 2*rotMat[0][1]*rotMat[1][1]; tm[5][2] = 2*rotMat[0][2]*rotMat[1][2]; tm[5][3] = rotMat[0][1]*rotMat[1][2]+rotMat[0][2]*rotMat[1][1]; tm[5][4] = rotMat[0][0]*rotMat[1][2]+rotMat[0][2]*rotMat[1][0]; tm[5][5] =rotMat[0][0]*rotMat[1][1]+rotMat[0][1]*rotMat[1][0];
        
        
    }
    ScalarT Ctemp[6][6];
    bool transpose = true;
    CORRESPONDENCE::MatMul(6,tm ,C ,Ctemp, transpose);
    transpose = false;
    CORRESPONDENCE::MatMul(6,Ctemp ,tm ,Cnew, transpose);
}
template void createRotatedStiff<Sacado::Fad::DFad<double> >
(
const Sacado::Fad::DFad<double> C[][6],
const Sacado::Fad::DFad<double> rotMat[][3],
Sacado::Fad::DFad<double>  Cnew[][6]
);


// Explicit template instantiation for double
template void createRotatedStiff<double>
(
const double C[][6],
const double rotationMat[][3],
double Cnew[][6]
);

template<typename ScalarT>
void createRotatedPythonBasedStiff
(
const ScalarT C[][6],
const double alpha[],
ScalarT Cnew[][6]
){
    
    const double PI  = 3.141592653589793238463;
    double psi = alpha[2]*(PI)/180;
    double theta = alpha[1]*(PI)/180;
    double phi = alpha[0]*(PI)/180;
    double cosPsi   = cos(psi);
    double sinPsi   = sin(psi);
    double cosTheta = cos(theta);
    double sinTheta = sin(theta);
    double cosPhi   = cos(phi);
    double sinPhi   = sin(phi);
    Cnew[0][0] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,4)*C[1][1] + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*C[1][3]*cosPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][2]*cosPsi*pow(sinTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][3]*cosPsi*pow(sinTheta,2) + 8*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,3) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2) + 8*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta + 8*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2) + C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,4) + 2*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*pow(sinTheta,2) + 4*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3)*cosPsi*sinTheta + C[2][2]*cosPsi*pow(sinTheta,4) + 4*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,3) + 4*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*pow(sinTheta,2) ;
    Cnew[0][1] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][1] + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][2]*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][2]*cosPsi*pow(sinTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta + C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*pow(sinTheta,2) + C[0][2]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[2][2]*cosPsi*pow(sinTheta,2)*sinPsi*pow(sinTheta,2) + 2*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) + 2*C[2][4]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 4*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta ;
    Cnew[0][2] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*pow(cosPhi,2)*C[0][1] + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][4]*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][1]*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][2]*pow(cosTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][3]*cosTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta*sinTheta*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][3]*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*sinTheta*pow(cosTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi - sinTheta*pow(cosPhi,2)*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - sinTheta*pow(cosPhi,2)*C[0][2]*cosPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta + 2*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[2][4]*cosPsi*pow(sinTheta,2)*cosTheta + 2*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + 4*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi + 4*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta + C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*pow(cosPhi,2) + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*pow(cosTheta,2) + 2*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta*sinTheta*sinPhi + C[1][2]*cosPsi*pow(sinTheta,2)*sinTheta*pow(cosPhi,2) + 2*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[2][2]*cosPsi*pow(sinTheta,2)*pow(cosTheta,2) + 2*C[2][3]*cosPsi*pow(sinTheta,2)*cosTheta*sinTheta*sinPhi + 2*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*pow(cosTheta,2) + 4*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi ;
    Cnew[0][3] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][5] - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][1]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][4]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][2]*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][3]*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*pow(sinTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,2)*cosTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta - sinTheta*cosPhi*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*cosPhi*C[0][2]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*cosPhi*C[2][4]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta*sinPsi*sinTheta + C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta*sinTheta*sinPhi + C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[2][2]*cosPsi*pow(sinTheta,2)*cosTheta*sinPsi*sinTheta + C[2][3]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta*sinTheta*sinPhi + 2*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta + C[2][4]*cosPsi*pow(sinTheta,2)*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[2][5]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi ;
    Cnew[0][4] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*(-1)*sinTheta*cosPhi*C[1][5] - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*C[1][1]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*C[1][3]*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][4]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][2]*cosPsi*sinTheta*cosTheta + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][3]*cosPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][3]*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*pow(sinTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*pow(sinTheta,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][2]*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,2)*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*sinPhi - sinTheta*cosPhi*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3) - sinTheta*cosPhi*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2) + 3*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta - sinTheta*cosPhi*C[2][4]*cosPsi*pow(sinTheta,3) + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2) + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*cosTheta + C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*sinTheta*sinPhi + C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3)*cosTheta + C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3)*sinTheta*sinPhi + C[2][2]*cosPsi*pow(sinTheta,3)*cosTheta + C[2][3]*cosPsi*pow(sinTheta,3)*sinTheta*sinPhi + 3*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2)*cosTheta + C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*sinTheta*sinPhi + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*cosTheta + 2*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi ;
    Cnew[0][5] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][1] - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*C[1][3]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,3)*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosPsi*sinTheta + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][2]*cosPsi*sinTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*pow(sinTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,3) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2) + C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*sinPsi*sinTheta + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(sinPhi,3)*sinPsi*sinTheta + 3*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[2][2]*cosPsi*pow(sinTheta,3)*sinPsi*sinTheta + 3*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta + C[2][4]*cosPsi*pow(sinTheta,3)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosPsi*sinTheta*sinPsi*sinTheta + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi ;
    Cnew[1][1] =  -sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,4)*C[1][1] + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][3]*sinPsi*sinTheta + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][2]*sinPsi*pow(sinTheta,2) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][3]*sinPsi*pow(sinTheta,2) + 8*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*sinPsi*pow(sinTheta,3) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + 8*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + 8*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + C[0][0]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,4) + 2*C[0][2]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*pow(sinTheta,2) + 4*C[0][4]*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3)*sinPsi*sinTheta + C[2][2]*sinPsi*pow(sinTheta,4) + 4*C[2][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,3) + 4*C[4][4]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*pow(sinTheta,2) ;
    Cnew[1][2] =  -sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*pow(cosPhi,2)*C[0][1] + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][4]*cosTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][1]*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][2]*pow(cosTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta*sinTheta*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosTheta*sinPsi*sinTheta + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*pow(cosTheta,2)*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinTheta*pow(cosPhi,2)*C[0][0]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinTheta*pow(cosPhi,2)*C[0][2]*sinPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*pow(cosPhi,2)*C[0][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*sinTheta*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[2][4]*cosTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*cosPhi*C[2][5]*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 4*(-1)*sinTheta*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 4*(-1)*sinTheta*cosPhi*C[4][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*pow(cosPhi,2) + C[0][2]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*C[0][3]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + C[1][2]*sinPsi*pow(sinTheta,2)*sinTheta*pow(cosPhi,2) + 2*C[1][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[2][2]*pow(cosTheta,2)*sinPsi*pow(sinTheta,2) + 2*C[2][3]*cosTheta*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*C[2][4]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 4*C[4][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi ;
    Cnew[1][3] =  -sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*(-1)*sinTheta*cosPhi*C[1][5] - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][1]*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][3]*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][4]*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][2]*cosTheta*sinPsi*sinTheta + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*sinPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][3]*cosTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*sinPsi*pow(sinTheta,2) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*sinPsi*pow(sinTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi - sinTheta*cosPhi*C[0][0]*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3) - sinTheta*cosPhi*C[0][2]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + 3*(-1)*sinTheta*cosPhi*C[0][4]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta - sinTheta*cosPhi*C[2][4]*sinPsi*pow(sinTheta,3) + 2*(-1)*sinTheta*cosPhi*C[4][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + C[0][2]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + C[0][3]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta*sinTheta*sinPhi + C[0][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3) + C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3)*sinTheta*sinPhi + C[2][2]*cosTheta*sinPsi*pow(sinTheta,3) + C[2][3]*sinPsi*pow(sinTheta,3)*sinTheta*sinPhi + 3*C[2][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + C[2][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta*sinTheta*sinPhi + 2*C[4][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*C[4][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi ;
    Cnew[1][4] =  -cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][5] - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][1]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][2]*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][4]*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][2]*cosPsi*sinTheta*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinTheta*cosPhi*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinTheta*cosPhi*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinTheta*cosPhi*C[0][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinTheta*cosPhi*C[2][4]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[0][2]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[0][3]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + C[2][2]*cosPsi*sinTheta*cosTheta*sinPsi*pow(sinTheta,2) + C[2][3]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*pow(sinTheta,2) + 2*C[2][4]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*C[4][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi ;
    Cnew[1][5] =  -cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][1] + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*sinPsi*sinTheta + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*sinPsi*pow(sinTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*sinPsi*pow(sinTheta,3) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][3]*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,3)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][2]*cosPsi*sinTheta*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3) + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + C[0][2]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + 3*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta + C[0][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(sinPhi,3) + C[2][2]*cosPsi*sinTheta*sinPsi*pow(sinTheta,3) + C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,3) + 3*C[2][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*pow(sinTheta,2) + 2*C[4][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinPsi*sinTheta ;
    Cnew[2][2] =  -sinTheta*pow(cosPhi,4)*C[0][0] + 4*(-1)*sinTheta*pow(cosPhi,3)*C[0][4]*cosTheta + 4*(-1)*sinTheta*pow(cosPhi,3)*C[0][5]*sinTheta*sinPhi + 2*(-1)*sinTheta*pow(cosPhi,2)*C[0][1]*sinTheta*pow(cosPhi,2) + 2*(-1)*sinTheta*pow(cosPhi,2)*C[0][2]*pow(cosTheta,2) + 4*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*cosTheta*sinTheta*sinPhi + 8*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*cosTheta*sinTheta*sinPhi + 4*(-1)*sinTheta*pow(cosPhi,2)*C[4][4]*pow(cosTheta,2) + 4*(-1)*sinTheta*pow(cosPhi,2)*C[5][5]*sinTheta*pow(cosPhi,2) + 4*(-1)*sinTheta*cosPhi*C[1][4]*cosTheta*sinTheta*pow(cosPhi,2) + 4*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*pow(sinPhi,3) + 4*(-1)*sinTheta*cosPhi*C[2][4]*pow(cosTheta,3) + 4*(-1)*sinTheta*cosPhi*C[2][5]*pow(cosTheta,2)*sinTheta*sinPhi + 8*(-1)*sinTheta*cosPhi*C[3][4]*cosTheta*sinTheta*pow(cosPhi,2) + 8*(-1)*sinTheta*cosPhi*C[4][5]*pow(cosTheta,2)*sinTheta*sinPhi + C[1][1]*sinTheta*pow(cosPhi,4) + 2*C[1][2]*pow(cosTheta,2)*sinTheta*pow(cosPhi,2) + 4*C[1][3]*cosTheta*sinTheta*pow(sinPhi,3) + C[2][2]*pow(cosTheta,4) + 4*C[2][3]*pow(cosTheta,3)*sinTheta*sinPhi + 4*C[3][3]*pow(cosTheta,2)*sinTheta*pow(cosPhi,2) ;
    Cnew[2][3] =  -sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,3)*C[0][5] - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][1]*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*cosTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*cosTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[5][5]*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*cosTheta*sinTheta*sinPhi + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*pow(cosTheta,2) + 4*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*pow(cosTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][1]*sinTheta*pow(sinPhi,3) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*pow(cosTheta,2)*sinTheta*sinPhi + 3*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosTheta*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*pow(cosTheta,3) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*pow(cosTheta,2)*sinTheta*sinPhi - sinTheta*pow(cosPhi,3)*C[0][0]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*pow(cosPhi,3)*C[0][4]*sinPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[0][2]*cosTheta*sinPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[0][3]*sinPsi*sinTheta*sinTheta*sinPhi + 3*(-1)*sinTheta*pow(cosPhi,2)*C[0][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 3*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*pow(cosPhi,2)*C[4][4]*cosTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) - sinTheta*cosPhi*C[0][2]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][3]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinTheta*cosPhi*C[1][4]*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + 3*(-1)*sinTheta*cosPhi*C[2][4]*pow(cosTheta,2)*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[2][5]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + 4*(-1)*sinTheta*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[4][4]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 4*(-1)*sinTheta*cosPhi*C[4][5]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + C[1][2]*cosTheta*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[1][3]*sinPsi*sinTheta*sinTheta*pow(sinPhi,3) + C[1][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(sinPhi,3) + C[2][2]*pow(cosTheta,3)*sinPsi*sinTheta + 3*C[2][3]*pow(cosTheta,2)*sinPsi*sinTheta*sinTheta*sinPhi + C[2][4]*pow(cosTheta,3)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[2][5]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*C[3][3]*cosTheta*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + 2*C[4][5]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi ;
    Cnew[2][4] =  -cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,3)*C[0][5] - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][1]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[5][5]*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*cosTheta*sinTheta*sinPhi + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*pow(cosTheta,2) + 4*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*pow(cosTheta,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][1]*sinTheta*pow(sinPhi,3) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][2]*pow(cosTheta,2)*sinTheta*sinPhi + 3*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][3]*cosTheta*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*pow(cosTheta,3) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*pow(cosTheta,2)*sinTheta*sinPhi - sinTheta*pow(cosPhi,3)*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - sinTheta*pow(cosPhi,3)*C[0][4]*cosPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[0][2]*cosPsi*sinTheta*cosTheta - sinTheta*pow(cosPhi,2)*C[0][3]*cosPsi*sinTheta*sinTheta*sinPhi + 3*(-1)*sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 3*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*pow(cosPhi,2)*C[4][4]*cosPsi*sinTheta*cosTheta - sinTheta*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(cosPhi,2) - sinTheta*cosPhi*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2) + 2*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi - sinTheta*cosPhi*C[1][4]*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) + 3*(-1)*sinTheta*cosPhi*C[2][4]*cosPsi*sinTheta*pow(cosTheta,2) + 2*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) + 4*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2) + 4*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(cosPhi,2) + C[1][2]*cosPsi*sinTheta*cosTheta*sinTheta*pow(cosPhi,2) + C[1][3]*cosPsi*sinTheta*sinTheta*pow(sinPhi,3) + C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*pow(cosPhi,2) + C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(sinPhi,3) + C[2][2]*cosPsi*sinTheta*pow(cosTheta,3) + 3*C[2][3]*cosPsi*sinTheta*pow(cosTheta,2)*sinTheta*sinPhi + C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,3) + C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2)*sinTheta*sinPhi + 2*C[3][3]*cosPsi*sinTheta*cosTheta*sinTheta*pow(cosPhi,2) + 2*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*pow(cosPhi,2) + 2*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2)*sinTheta*sinPhi ;
    Cnew[2][5] =  -cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][1] + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][1]*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*pow(cosTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][3]*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*pow(cosTheta,2)*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][3]*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*sinTheta*pow(cosTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi - sinTheta*pow(cosPhi,2)*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*pow(cosPhi,2)*C[0][2]*cosPsi*sinTheta*sinPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[2][4]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[1][2]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[1][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + C[2][2]*cosPsi*sinTheta*pow(cosTheta,2)*sinPsi*sinTheta + 2*C[2][3]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2)*sinPsi*sinTheta + C[2][4]*cosPsi*sinTheta*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*C[4][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi ;
    Cnew[3][3] =  -sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*pow(cosPhi,2)*C[5][5] + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[3][4]*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][1]*sinTheta*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][3]*pow(cosTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*pow(cosTheta,2)*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*pow(cosPhi,2)*C[0][0]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*sinTheta*pow(cosPhi,2)*C[0][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[4][4]*sinPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*cosPhi*C[0][2]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[0][3]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*sinTheta*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[2][4]*cosTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[4][5]*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + C[2][2]*pow(cosTheta,2)*sinPsi*pow(sinTheta,2) + 2*C[2][3]*cosTheta*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*C[2][4]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*C[2][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + C[3][3]*sinPsi*pow(sinTheta,2)*sinTheta*pow(cosPhi,2) + 2*C[3][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + C[4][4]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*C[4][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*pow(cosPhi,2) ;
    Cnew[3][4] =  -cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][5] - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][1]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*sinPsi*pow(sinTheta,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosTheta*sinPsi*pow(sinTheta,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][3]*cosPsi*sinTheta*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinTheta*cosPhi*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinTheta*cosPhi*C[0][2]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinTheta*cosPhi*C[0][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) - sinTheta*cosPhi*C[2][4]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) - sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2) - sinTheta*cosPhi*C[4][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + C[2][2]*cosPsi*sinTheta*cosTheta*sinPsi*pow(sinTheta,2) + C[2][3]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*pow(sinTheta,2) + 2*C[2][4]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[2][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi + C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2)*sinTheta*sinPhi + C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[4][4]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2)*sinTheta*sinPhi + C[4][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi ;
    Cnew[3][5] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][5] - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][1]*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][3]*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][3]*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*cosPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*sinTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][2]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*pow(sinTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,2)*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*sinPhi - sinTheta*cosPhi*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*cosPhi*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*cosPhi*C[2][4]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta - sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[4][4]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[2][2]*cosPsi*pow(sinTheta,2)*cosTheta*sinPsi*sinTheta + C[2][3]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta*sinTheta*sinPhi + 2*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta + C[2][4]*cosPsi*pow(sinTheta,2)*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta*sinTheta*sinPhi + C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta*sinPsi*sinTheta + C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[4][5]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi ;
    Cnew[4][4] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*pow(cosPhi,2)*C[5][5] + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinTheta*cosPhi*C[3][4]*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][1]*sinTheta*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[1][3]*cosTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][3]*pow(cosTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][2]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][3]*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*sinTheta*pow(cosTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2) - sinTheta*pow(cosPhi,2)*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) + 2*(-1)*sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[4][4]*cosPsi*pow(sinTheta,2) + 2*(-1)*sinTheta*cosPhi*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta + 2*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta + 2*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[2][4]*cosPsi*pow(sinTheta,2)*cosTheta + 2*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta + 2*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*pow(sinTheta,2)*sinTheta*sinPhi + C[2][2]*cosPsi*pow(sinTheta,2)*pow(cosTheta,2) + 2*C[2][3]*cosPsi*pow(sinTheta,2)*cosTheta*sinTheta*sinPhi + 2*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*pow(cosTheta,2) + 2*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + C[3][3]*cosPsi*pow(sinTheta,2)*sinTheta*pow(cosPhi,2) + 2*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) + 2*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*cosTheta*sinTheta*sinPhi + C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*pow(cosTheta,2) + 2*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi + C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinTheta*pow(cosPhi,2) ;
    Cnew[4][5] =  -cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[5][5] + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][5]*sinTheta*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][1]*sinTheta*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*pow(cosTheta,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][1]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosTheta*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][2]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][3]*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*pow(cosTheta,2)*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][3]*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][4]*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*pow(cosPhi,2)*C[3][5]*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[1][4]*cosPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[2][5]*cosPsi*sinTheta*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][4]*cosPsi*sinTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*cosTheta - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*(-1)*sinTheta*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*cosPsi*sinTheta*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinTheta*pow(cosPhi,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*sinTheta*pow(cosTheta,2) - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*cosTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinTheta*sinPhi - sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2) - sinTheta*pow(cosPhi,2)*C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta - sinTheta*pow(cosPhi,2)*C[0][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*pow(cosPhi,2)*C[4][4]*cosPsi*sinTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[0][2]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - sinTheta*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - sinTheta*cosPhi*C[0][3]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinTheta*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + 2*(-1)*sinTheta*cosPhi*C[2][4]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*sinPhi - sinTheta*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi - sinTheta*cosPhi*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta - sinTheta*cosPhi*C[4][4]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinTheta*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[2][2]*cosPsi*sinTheta*pow(cosTheta,2)*sinPsi*sinTheta + 2*C[2][3]*cosPsi*sinTheta*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2)*sinPsi*sinTheta + C[2][4]*cosPsi*sinTheta*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[2][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta*sinTheta*pow(cosPhi,2) + C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) + 2*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*pow(cosTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosTheta*sinPsi*sinTheta*sinTheta*sinPhi + C[4][5]*cosPsi*sinTheta*cosTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*sinPhi + C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinTheta*pow(cosPhi,2) ;
    Cnew[5][5] =  -cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][1] + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][3]*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][5]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][3]*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[3][4]*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - cosPsi*cosTheta*sinPhi-sinPsi*pow(cosPhi,2)*C[5][5]*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][3]*cosPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[1][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][1]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][2]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[1][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][3]*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][4]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][3]*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[2][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[3][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*sinPsi*pow(sinTheta,2) + 2*(-1)*cosPsi*cosTheta*sinPhi-sinPsi*cosPhi*C[4][5]*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][3]*cosPsi*pow(sinTheta,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[3][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta - sinPsi*cosTheta*sinPhi+cosPsi*pow(cosPhi,2)*C[5][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2) + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][3]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[0][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][3]*cosPsi*pow(sinTheta,2)*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[2][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[3][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*sinTheta + 2*(-1)*sinPsi*cosTheta*sinPhi+cosPsi*cosPhi*C[4][5]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi + C[0][0]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + 2*C[0][2]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + 2*C[0][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) + C[2][2]*cosPsi*pow(sinTheta,2)*sinPsi*pow(sinTheta,2) + 2*C[2][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*pow(sinTheta,2) + 2*C[2][4]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*pow(cosPhi,2)*sinPsi*pow(sinTheta,2) + 2*C[4][4]*cosPsi*cosTheta*cosPhi-sinPsi*sinPhi*cosPsi*sinTheta*sinPsi*cosTheta*cosPhi-cosPsi*sinPhi*sinPsi*sinTheta + C[4][4]*cosPsi*pow(sinTheta,2)*sinPsi*cosTheta*cosPhi-cosPsi*pow(cosPhi,2) ;
}

template void createRotatedPythonBasedStiff<Sacado::Fad::DFad<double> >
(
const Sacado::Fad::DFad<double> C[][6],
const double alpha[],
Sacado::Fad::DFad<double>  Cnew[][6]
);


// Explicit template instantiation for double
template void createRotatedPythonBasedStiff<double>
(
const double C[][6],
const double alpha[],
double Cnew[][6]
);










}


