C     WRITE(6,*) '------------------------------------------------------------------------------'
C     WRITE(6,*) 'VISCOELASTIC MATERIAL MODEL                                                   '
C     WRITE(6,*) 'AUTHOR:     DIPL.-ING. ROBERT HEIN                                            '
C     WRITE(6,*) 'EDITOR:     DIPL.-ING. MARTIN LIEBISCH                                        '
C     WRITE(6,*) 'DATE:       8th January 2015                                                  '
C     WRITE(6,*) '                                                                              '
C     WRITE(6,*) 'COMPANY:  GERMAN AEROSPACE CENTER (DLR)                                       '
C     WRITE(6,*) '                                                                              '
C     WRITE(6,*) '          INSTITUTE OF COMPOSITE STRUCTURES                                   '
C     WRITE(6,*) '               AND ADAPTIVE SYSTEMS (FA)                                      '
C     WRITE(6,*) '          38108 BRAUNSCHWEIG                                                  '
C     WRITE(6,*) '                                                                              '
C     WRITE(6,*) '          GERMANY                                                             '
C     WRITE(6,*) '------------------------------------------------------------------------------'
C
C=======================================================================
C                            UEXPAN                                   
C
C======================================================================= 
C Variables: CTE_11, CTE_22, CTE_33  for Glassy and Rubbery state - Ending G and R
C            BETA_11, BETA_22, BETA_33  for Glassy and Rubbery state - Ending G and R
C Output: EXPAN(1), EXPAN(2), EXPAN(3)  Expansion increments in 1-, 2- and 3-direction
C                       Expansion increments in 4-, 5- and 6-direction are set to zero
C Method: ExpansionInc1 = CTE_11 * tempInc + BETA_11 * cureInc
C                       while tempInc and cureRate are the increments for Temperature and 
C                       Degree of Cure
C
C Info: If more than one material are used, introduce a header like following to differ materials
C       A subroutine for each material might be used then
C---------------------------------------------------
C       SUBROUTINE UEXPAN(EXPAN,DEXPANDT,TEMP,TIME,DTIME,PREDEF,          
C      1 DPRED,STATEV,CMNAME,NSTATV,NOEL)       
C C  
C       INCLUDE 'ABA_PARAM.INC'
C C
C       CHARACTER*80 CMNAME
C      
C       IF (CMNAME(1:4) .EQ. 'CFK') THEN
C            CALL UEXPAN_CFK(EXPAN,DEXPANDT,TEMP,TIME,DTIME,PREDEF,          
C      1                     DPRED,STATEV,CMNAME,NSTATV,NOEL)
C       ENDIF 
C
C       RETURN
C       END
C---------
      SUBROUTINE UEXPAN(EXPAN,DEXPANDT,TEMP,TIME,DTIME,PREDEF,          
     1 DPRED,STATEV,CMNAME,NSTATV,NOEL)       
C  
      implicit real(8) (a-h,o-z)
C
      CHARACTER*80 CMNAME                                        
C
      DIMENSION EXPAN(*),DEXPANDT(*),Temp(2),TIME(2),PREDEF(*),         
     1 DPRED(*),STATEV(NSTATV)                                               
      REAL*8  CTE_11, CTE_22, CTE_33                                    
      REAL*8  beta_11, beta_22, beta_33                                 
      REAL*8  Tg0, Tg1, lamb, Tg   
      REAL*8  dstranTH1, dstranTH2, dstranTH3
      REAL*8  dstranCH1, dstranCH2, dstranCH3
      REAL*8 CUREDAT, RATEACT, DTIME, TEMPEND                           
      REAL*8 modelfunction,funcdegree                                       
      REAL*8 x1,x2,degmax
C==================================================================================
C    CALCULATIOIN OF MAX CURE LEVEL Xmax(T)=1/(1+EXP(-T*A+B))
C==================================================================================
      TEMPEND = TEMP(1)+TEMP(2)
C     x1 AND x2 ARE FACTORS GENERATED BY A PARAMETER OPTIMIZATION
         x1 = 7.7928e-5                                                 
         x2 = 484.93                                                    
         DEGMAX = -x1*(tempend-x2)*(tempend-x2)+1. 
      IF (TIME(2).EQ.0.0 ) THEN
            STATEV(1)=0.0D0           
            STATEV(2)=0.0D0
            STATEV(3)=0.0D0
      END IF
C
         IF (tempend.gt.x2) THEN                                        
C     UPPER BOUND FOR MAX CURE LEVEL
            degmax = 1.                                                          
         ELSEIF (DEGMAX.LT.0.) THEN
C     NEGATIVER MAX. AUSH�RTEGRAD BESITZT KEINE REALE BEDEUTUNG
             DEGMAX = 0.     
         ELSEIF (DEGMAX.LT.STATEV(4)) THEN
             DEGMAX = STATEV(4)  
         ELSE 
C    SPEICHERN VON DEGMAX AM ENDE DES INKREMENTES
         STATEV(4)=DEGMAX 
         END IF 
C==================================================================================
C      UMGEHEN DES BACKWARD EULER BEI ABGESCHLOSSENER AUSH�RTUNG
C      SONST BERECHNUNG VON X UND X_PUNKT
C==================================================================================
      IF(STATEV(1).GE.DEGMAX) THEN
            STATEV(2)=0.0D0
      ELSE
            STATEV(1)= FUNCDEGREE(TEMPEND,STATEV(1),DTIME,DEGMAX)
            RATEACT=MODELFUNCTION(TEMPEND,STATEV(1),DEGMAX)
      END IF
C==================================================================================
C      UPDATE DER STATUSVARIABLEN
C==================================================================================
      STATEV(2)=  RATEACT
      STATEV(4)=  DEGMAX
C==================================================================================
C      BERECHNUNG VON TG NACH DIBENEDETTO
C==================================================================================
      TG0=257.16                                                           
      TG1=503.49                                                        
      LAMB= 0.338498453523726                                         
      TG = TG0+(TG1-TG0)*LAMB*STATEV(1)/(1.0-(1.0-LAMB)*STATEV(1))
      STATEV(3)=TG
C==================================================================================
C      DEFINE CTE AND BETA DEPENDING ON CURE STATE
C==================================================================================
C     LIQUID STATE
       IF((TEMP(1) .GE. Tg) .AND. (STATEV(1) .LT. GELPUNKT)) THEN 
            CTE_11 = 0.0
            CTE_22 = 0.0     
            CTE_33 = 0.0
            beta_11 = 0.0                                                
            beta_22 = 0.0
            beta_33 = 0.0                                               
C     RUBBERY STATE
      ELSE IF((TEMP(1) .GE. Tg) .AND. (STATEV(1) .GT. GELPUNKT)) THEN      
            CTE_11 =  -0.093486739E-6                
            CTE_22 =   95.524004E-6
            CTE_33 =   95.524004E-6
            beta_11 = -2.7101E-6
            beta_22 = -2.01933E-2
            beta_33 = -2.01933E-2
       ELSE IF(TEMP(1) .LT. Tg) THEN 
C     GLASSY STATE
            CTE_11 = 4.8312e-07
            CTE_22 = 51.0185852e-06
            CTE_33 =  51.0185852e-06
            beta_11 =  -0.02426298E-2     
            beta_22 =  -1.818678E-2
            beta_33 =  -1.818678E-2
        END IF 
C==================================================================================
C BERECHNUNG THERMISCHE UND CHEMISCHE DEHNUNGSINKREMENTE
C EXPAN(1)- FASRERICHTUNG  = 1-Richtung                           
C EXPAN(2)- QUER ZUR FASER = 2-Richtung                           
C EXPAN(3)- QUER ZUR FASER = 3-Richtung                           
C==================================================================================
C     THERMAL EXPANSION STRAINS
         dstranTH1=CTE_11*Temp(2)
         dstranTH2=CTE_22*Temp(2)
         dstranTH3=CTE_33*Temp(2)     
C     CHEMICAL SHRINKAGE STRAINS
         dstranCH1=beta_11*STATEV(2)*DTIME
         dstranCH2=beta_22*STATEV(2)*DTIME
         dstranCH3=beta_33*STATEV(2)*DTIME
         STATEV(7) = dstranCH1
         STATEV(8) = dstranCH2
C     TOTAL EXPANSION
         EXPAN(1) = dstranTH1 + dstranCH1          
         EXPAN(2) = dstranTH2 + dstranCH2          
         EXPAN(3) = dstranTH3 + dstranCH3    
         EXPAN(4) = 0.0
         EXPAN(5) = 0.0
         EXPAN(6) = 0.0 
        RETURN                                                          
        END 
C=======================================================================
C                            HETVAL                                    =
C DIE USER-SUBROUTINE HETVAL BERECHNET DIE AUSHAERTUNGSRATE UND           
C AUSHAERTUNGSGRAD DES HARZES IN ABH�NGIGIGKEIT VON DER TEMPERATUR.        
C DES WEITEREN WIRD DER RESULTIERENDE W�RMEESTROM AN ABAQUS ZUR�CK        
C GEGEBEN, SODASS AUCH DIE EXOTHERMIE DES HARZES BER�CKSICHTIGT          
C WIRD. 
C=======================================================================
C Input: TEMPEND  TEMPERATURE AT THE END OF THE INCREMENT
C        DTIME  INCREMENTAL TIME
C Variables: VF - Fibre Volume Fraction
C            RE - Reaction Enthalpy
C            DENSITY - Resin Density
C     The variables above are set to certain values, the used equation is commented
C            RATEACT = Cure Rate at end of increment
C            CUREDAT = Total reaction heat of cure
C Output: FLUX = total occuring heat flux
C Info: If more than one material are used, introduce a header like following to differ materials
C       A subroutine for each material might be used then
C-----------------------------------------------------------------------
C       SUBROUTINE HETVAL(CMNAME,TEMP,TIME,DTIME,SVAR,FLUX,PREDEF,
C      1                  DPRED)
C
C       INCLUDE 'ABA_PARAM.INC'
C
C       CHARACTER*80 CMNAME
C
C       IF (CMNAME(1:4) .EQ. 'CFK') THEN
C            CALL HETVAL_CFK(CMNAME,TEMP,TIME,DTIME,SVAR,FLUX,PREDEF,
C      1                     DPRED)
C       ENDIF
C
C       RETURN
C       END
C---------
      SUBROUTINE HETVAL(CMNAME,TEMP,TIME,DTIME,SVAR,FLUX,PREDEF,
     1                  DPRED)
C
      implicit real*8(a-h,o-z)
C
      CHARACTER*80 CMNAME
C
      DIMENSION TEMP(2),SVAR(*),PREDEF(*),TIME(2),FLUX(2),DPRED(*)
C      
      REAL*8 CUREDAT, RATEACT, DTIME, TEMPEND
      REAL*8 MODELFUNCTION,FUNCDEGREE
      REAL*8 X1,X2,DEGMAX,A,B
      REAL*8  Tg0, Tg1, lamb, Tg, Gelpunkt
C==========
C     USER SUBROUTINE TO CALCULATE CURE RATE

C---------------------------------------------------
C     following in mm*t unit-system for RTM6
C     CUREDAT= (1.D0-VF)*   RE    * DENSITY
      CUREDAT= 0.4    *  471.23E9 *1.140E-9 
      TEMPEND = TEMP(1)
C CALCULATION OF XMAX(T) = 1/(1+EXP(-T*A+B))
         x1 = 7.7928e-5                                                 
         x2 = 484.93        
C     
      DEGMAX = -x1*(tempend-x2)*(tempend-x2)+1.
         IF (tempend.gt.x2) THEN                                        
C    OBERE SCHRANKE F�R MAXIMAL ERREICHBAREN AUSH�RTEGRAD            
            degmax = 1.                                                          
         ELSEIF (DEGMAX.LT.0.) THEN
C    NEGATIVER MAX. AUSH�RTEGRAD BESITZT KEINE REALE BEDEUTUNG
             DEGMAX = 0.     
         ELSEIF (DEGMAX.LT.SVAR(4)) THEN
             DEGMAX = SVAR(4)  
         ELSE 
C    SPEICHERN VON DEGMAX AM ENDE DES INKREMENTES
         SVAR(4)=DEGMAX 
         END IF 
C UMGEHEN DES BACKWARD EULER BEI ABGESCHLOSSENER AUSH�RTUNG
      IF(SVAR(1).GE.DEGMAX) THEN
            RATEACT=0.0D0
      ELSE
            SVAR(1)= FUNCDEGREE(TEMPEND,SVAR(1),DTIME,DEGMAX)
            RATEACT=MODELFUNCTION(TEMPEND,SVAR(1),DEGMAX)
      END IF
C==================================================================================
C      BERECHNUNG VON TG NACH DIBENEDETTO
C================================================================================== 
      Tg0=257.16                                                           
      Tg1=503.49                                                        
      lamb= 0.338498453523726                                    
      Tg = Tg0+(Tg1-Tg0)*lamb*SVAR(1)/(1.0-(1.0-lamb)*SVAR(1))
C==================================================================================
C      BERECHNUNG DES WAERMESTROMS
C==================================================================================
      FLUX(1)=  CUREDAT*RATEACT
C==================================================================================
C      UPDATE STATUSVARIABLEN
C==================================================================================
      SVAR(2)=  RATEACT
      SVAR(3)=  Tg
      SVAR(4)=  DEGMAX
      RETURN
      END
C==================================================================================
C      INTEGRATION MITTELS BACKWARD EULER VERFAHREN: Y(K+1)= Y(K)+DT*F(K+1) 
C        FUNCDEGREE(T_END, DEGREE_START, TIMESTEP, DEGREE_MAX)
C==================================================================================
      REAL*8 FUNCTION FUNCDEGREE(T1,DEGREE0,TIMESTEP,DEGMAX)
        IMPLICIT NONE
        REAL*8 T0,T1,DEGREE0,TIMESTEP
        REAL*8 DEGREE1,DEGREE2,RATE1,RATE2
        REAL*8 RATEERROR,MAXERROR, DEGMAX
        REAL*8 MODELFUNCTION
C     STERUERUNGSPARAMETER F�R DIE ITERATION
         RATEERROR=1.;MAXERROR=1.D-10
         RATE2 = MODELFUNCTION(T1,DEGREE0,DEGMAX)
C          ERSTER SCHRITT DES BACKWARD EULER VERFAHRENS
         DEGREE2= DEGREE0+TIMESTEP*RATE2
C          ITERATION ZUR MINIMIERUNG DES ENTSTEHENDEN FEHLERS
         DO WHILE (RATEERROR.GT.MAXERROR)
             IF (DEGREE2.GT.DEGMAX) THEN   ! AKTUELLER AUSH�RTEGRAD KANN MAX. AUSH�RTEGRAD NICHT �BERSCHREITEN
                 DEGREE2=DEGMAX            ! GEFAHR VON NEGATIVER WURZEL IN FUNC MODELFUNCTION
             END IF
             RATE1=RATE2
             DEGREE1=DEGREE2
             RATE2=MODELFUNCTION(T1,DEGREE1,DEGMAX)
             DEGREE2=DEGREE0+TIMESTEP*RATE2  ! N-TER SCHRITT DES BACKWARD-EULER VERFAHRENS
             IF  (RATE1.EQ.0.) THEN          ! F�R RATE1=0 IST KEIN FEHLER MEHR M�GLICH
                 RATEERROR =0.
             ELSE IF (ABS(RATE2-RATE1).LT.1E-6) THEN
                 RATEERROR=0.                ! REDUZIERT DIE ANZAHL DER ITERATIONSCHRITTE BEI KLEINEN AUSH�RTEGESCHWINDIGKEITEN
             ELSE
                 RATEERROR = ABS((RATE2-RATE1)/RATE1)
             END IF
         END DO
        FUNCDEGREE=DEGREE2
      END FUNCTION

C==================================================================================
C      DEFINITION DES REAKTIONSMODELLS
C==================================================================================
      REAL*8 FUNCTION  MODELFUNCTION(T,DEGREE,DEGMAX)
        IMPLICIT NONE
        REAL*8 T,DEGREE
        REAL*8 RATEACT1, RATEACT2,DEGMAX
C         PARAMETER DES AUSHAERTUNGSMODELLS
        REAL*8 PARAMA1, PARAME1, PARAMA2, PARAME2
     1  , PARAML, PARAMM, PARAMN
        
        PARAMA1=69505.
        PARAME1=75549.0 
        PARAMA2=6390.
        PARAME2=50911.0 
        PARAML=0.48915
        PARAMM=1.54901
        PARAMN=2.17936
        IF (DEGREE .GE. DEGMAX) THEN
            DEGREE=DEGMAX
        END IF
C
        MODELFUNCTION = (PARAMA1*EXP(-PARAME1/(8.314472*T))*
     1  (DEGMAX-DEGREE)**PARAML+
     1  PARAMA2*EXP(-PARAME2/(8.314472*T))*(DEGREE**PARAMM)*
     1  (DEGMAX-DEGREE)**PARAMN)
      END FUNCTION     
C=======================================================================
C                          UMAT                                        =
C=======================================================================
C DIE ROUTINE UMAT BESCHREIBT EIN VISKOELASTISCHES                      
C MATERIALVERHALTEN FUER EIN THERMORHOELOGISCH       
C EINFACHES HARZ NACH POON.                                             
C ES WIRD ZWISCHEN GELARTIGEN, GUMMIELASTISCHEN UND GLASARTIGEN       
C ZUSTAND DES HARZES UNTERSCHIEDEN.                  
C=======================================================================
C Input:
C Variables: Properties that are obtained by the user Material:
C         Call by PROPS(z) while z is the position in user material
C------------------------------------------------------------------
C z = 1 to 4: fibre volume ratio, point of gelation, reaction enthalpy, density of composite
C z = 5 to 9: empty space e.g. for later parameters
C z = 10 to 15: CTE's and chemical shrinkage factors of composite in rubbery state, order:1-2-3
C z = 16 to 21: CTE's and chemical shrinkage factors of composite in glassy state, order:1-2-3
C z = 22: empty
C z = 23 to 28: engineering constants of composite; E_L, E_T, NU_LT, NU_TT, G_LT, G_TT
C z = 29 to 40: empty space e.g. for later, further suggestions
C old user materials as used in other subroutines starts here
C z = 41 to 45: number of prony series parameters
C z = 46 to 50: instantaneous stiffness tensor components (commented out in this subroutine)
C z = 51 to last: prony series, total number according to z = 41 to 45
C-----------------------------------------------------------------
C Output:
C======================================================================= 
      SUBROUTINE UMAT(STRESS,SVAR,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,
     2 STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     3 NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     4 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)
C                                                       
      implicit real(8) (a-h,o-z)                                           
C                                                                       
      CHARACTER*80 CMNAME                                               
       DIMENSION STRESS(NTENS),SVAR(NSTATV),                             
     1 DDSDDE(NTENS,NTENS),                                             
     2 DRPLDE(NTENS),                                     
     3 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),           
     4 PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3) 
C==================================================================================
C     MATERIAL PARAMETER              
C==================================================================================
      DOUBLE PRECISION 
     1 C11,C12,C22,C23,C44, 
     2 TEMPEND,TEND,
     3 C11PRONY(INT(PROPS(1))),C11TAU(INT(PROPS(1))),
     4 C12PRONY(INT(PROPS(2))),C12TAU(INT(PROPS(2))),
     5 C22PRONY(INT(PROPS(3))),C22TAU(INT(PROPS(3))),
     6 C23PRONY(INT(PROPS(4))),C23TAU(INT(PROPS(4))),
     7 C44PRONY(INT(PROPS(5))),C44TAU(INT(PROPS(5))),
     8 E(NTENS),ATPARAM(6),AT, STRAININC(NTENS),
     9 C11STATE(INT(PROPS(1))),C12STATE(INT(PROPS(2))),C13STATE(INT(PROPS(2))),
     1 C21STATE(INT(PROPS(2))),C22STATE(INT(PROPS(3))),C23STATE(INT(PROPS(4))),
     2 C31STATE(INT(PROPS(2))),C32STATE(INT(PROPS(4))),C33STATE(INT(PROPS(3))),
     3 C44STATE(INT(PROPS(5))),C55STATE(INT(PROPS(5))),
     4 C661STATE(INT(PROPS(3))),C662STATE(INT(PROPS(4))),
     5 NC11STATE(INT(PROPS(1))),NC12STATE(INT(PROPS(2))),
     6 NC13STATE(INT(PROPS(2))),NC21STATE(INT(PROPS(2))),
     7 NC22STATE(INT(PROPS(3))),NC23STATE(INT(PROPS(4))),
     8 NC31STATE(INT(PROPS(2))),NC32STATE(INT(PROPS(4))),
     9 NC33STATE(INT(PROPS(3))),NC44STATE(INT(PROPS(5))),
     1 NC55STATE(INT(PROPS(5))),NC661STATE(INT(PROPS(3))),
     2 NC662STATE(INT(PROPS(4))),
     3 NPC11,NPC12,NPC22,NPC23,NPC44,
     4 DDSDDES(NTENS,NTENS),
     5 TG0, TG1, LAMB, TG, 
     6 CUREDAT, RATEACT,DMNAMODEL,FUNCDEGREE,MODELFUNCTION,
     7 CTE_11, CTE_22, CTE_33, BETA_11, BETA_22, BETA_33,
     8 DEGMAX, A,B, 
     9 DSTRANTH1, DSTRANTH2, DSTRANTH3,
     1 DSTRANCH1, DSTRANCH2, DSTRANCH3,
     2 DSTRANTH(6),DSTRANCH(6),
     3 DDSDDTTEMP(6),CTE(6),DDSDDT(6),
     4 C11R,C12R,C22R,C23R,C44R,
     5 E_L, E_T, NU_LT, NU_TT, G_LT 
C
      REAL*8 RELAXATION
C==================================================================================      
C     ANZAHL DER PRONY-PARAMETER
C==================================================================================
      NPC11 = PROPS(1)
      NPC12 = PROPS(2)
      NPC22 = PROPS(3)
      NPC23 = PROPS(4)
      NPC44 = PROPS(5)
C==================================================================================
C     INSTANTANE WERTE DER TENSOR-KOMPONENTEN - OLD, COMMENTED OUT, CAN BE DELETED!?
C==================================================================================
      C11 = PROPS(6)
      C12 = PROPS(7)
      C22 = PROPS(8)
      C23 = PROPS(9)
      C44 = PROPS(10)
C     TG AUS UEXPAN
C      TG=SVAR(3) 
      TG = 180 + 273.15
C==================================================================================
C      EINLESEN DER PRONY-PARAMETER UEBER PROPS
C==================================================================================
C     C11
      START = 10
      DO K1=1,NPC11
            K2 = START + 2 * (K1 - 1) + 1
            C11PRONY(K1) = PROPS(K2)
            C11TAU(K1) = PROPS(K2 + 1)
      END DO
C     C12
      START = K2 + 1
      DO K1=1,NPC12
            K2 = START + 2 * (K1 - 1) + 1
            C12PRONY(K1) = PROPS(K2)
            C12TAU(K1) = PROPS(K2 + 1)
      END DO
C     C22
      START = K2 + 1
      DO K1=1,NPC22
            K2 = START + 2 * (K1 - 1) + 1
            C22PRONY(K1) = PROPS(K2)
            C22TAU(K1) = PROPS(K2 + 1)
      END DO
C     C23
      START = K2 + 1
      DO K1=1,NPC23
            K2 = START + 2 * (K1 - 1) + 1
            C23PRONY(K1) = PROPS(K2)
            C23TAU(K1) = PROPS(K2 + 1)
      END DO
C     C44
      START = K2 + 1
      DO K1=1,NPC44
            K2 = START + 2 * (K1 - 1) + 1
            C44PRONY(K1) = PROPS(K2)
            C44TAU(K1) = PROPS(K2 + 1)
      END DO      
C==================================================================================
C   STATUSVARIABLEN AUS VORHERIGEN ZEITSCHRITT
C==================================================================================
C     C11STATE
      START = 8
      DO K1=1,NPC11
            K2= START + K1
            C11STATE(K1) = SVAR(K2)
      END DO
C     C12STATE
      START = K2
      DO K1=1,NPC12
            K2= START +K1
            C12STATE(K1) = SVAR(K2)
      END DO
C     C13STATE
      START = K2
      DO K1=1,NPC12
            K2= START +K1
            C13STATE(K1) = SVAR(K2)
      END DO
C     C21STATE
      START = K2
      DO K1=1,NPC12
            K2= START +K1
            C21STATE(K1) = SVAR(K2)
      END DO
C     C22STATE
      START = K2
      DO K1=1,NPC22
            K2= START +K1
            C22STATE(K1) = SVAR(K2)
      END DO
C     C23STATE
      START = K2
      DO K1=1,NPC23
            K2= START +K1
            C23STATE(K1) = SVAR(K2)
      END DO
C     C31STATE      
      START = K2
      DO K1=1,NPC12
            K2= START +K1
            C31STATE(K1) = SVAR(K2)
      END DO
C     C32STATE
      START = K2
      DO K1=1,NPC23
            K2= START +K1
            C32STATE(K1) = SVAR(K2)
      END DO
C     C33STATE
      START = K2
      DO K1=1,NPC22
            K2= START +K1
            C33STATE(K1) = SVAR(K2)
      END DO
C     C44STATE
      START = K2
      DO K1=1,NPC44
            K2= START +K1
            C44STATE(K1) = SVAR(K2)
      END DO
C     C55STATE
      START = K2
      DO K1=1,NPC44
            K2= START +K1
            C55STATE(K1) = SVAR(K2)
      END DO
C     C661STATE, [C22 PART]
      START = K2
      DO K1=1,NPC22
            K2= START +K1
            C661STATE(K1) = SVAR(K2)
      END DO
C     C662STATE, [C23 PART]
      START = K2
      DO K1=1,NPC23
            K2= START +K1
            C662STATE(K1) = SVAR(K2)
      END DO
C==================================================================================
C    STRAIN AT END OF INCREMENT                                  
C================================================================================== 
      DO K1=1,NTENS
         E(K1) = STRAN(K1) + DSTRAN(K1)
      END DO
C==================================================================================
C    STRAIN FOR STRESS UPDATE                                 
C================================================================================== 
      DO K1=1,NTENS
       STRAININC(K1)=DSTRAN(K1)
      END DO
C==================================================================================
C  BERECHNUNG DER STEIFIGKEITEN, WENN SIMULATIONSTEMPERATUR OBERHALB DER MESSDATEN IST
C================================================================================== 
      IF (TEMP .GE. 533.15) THEN
C     COMPUTE STATE VARIALES AT END OF INCREMENT
C     NC11STATE
      DO K1=1,NPC11
            NC11STATE(K1) = C11*C11PRONY(K1) * E(1)
      END DO
C     NC12STATE
      DO K1=1,NPC12
            NC12STATE(K1) = C12*C12PRONY(K1) * E(2)
      END DO
C     NC13STATE
      DO K1=1,NPC12
            NC13STATE(K1) = C12*C12PRONY(K1) * E(3)
      END DO
C     NC21STATE
      DO K1=1,NPC12
            NC21STATE(K1) = C12*C12PRONY(K1) * E(1)
      END DO
C     NC22STATE
      DO K1=1,NPC22
            NC22STATE(K1) = C22*C22PRONY(K1) * E(2)
      END DO
C     NC23STATE
      DO K1=1,NPC23
            NC23STATE(K1) = C23*C23PRONY(K1) * E(3)
      END DO
C     NC31STATE, EQUAL TO NC21STATE FOR TRANSVERSAL ISOTROPIC MATERIALS
      DO K1=1,NPC12
            NC31STATE(K1) = C21STATE(K1)
      END DO
C     NC32STATE
      DO K1=1,NPC23
            NC32STATE(K1) = C23*C23PRONY(K1) * E(2)
      END DO
C     NC33STATE
      DO K1=1,NPC22
            NC33STATE(K1) =  C22*C22PRONY(K1) * E(3)
      END DO
C     -------------------------------------------
C     NC44STATE
      DO K1=1,NPC44
            NC44STATE(K1) = C44*C44PRONY(K1) * E(4)
      END DO
C     -------------------------------------------
C     NC55STATE
      DO K1=1,NPC44
            NC55STATE(K1) = C44*C44PRONY(K1) * E(5)
      END DO
C     -------------------------------------------
C     NC661STATE -> STATE VARIABLE FOR C22 PART OF NC66
      DO K1=1,NPC22
            NC661STATE(K1) = C22*C22PRONY(K1) * E(6)
            NC661STATE(K1) = 0.5 * NC661STATE(K1)
      END DO
C     NC662STATE -> STATE VARIABLE FOR C23 PART OF NC66 ->
      DO K1=1,NPC23
            NC662STATE(K1) =  C23*C23PRONY(K1) * E(6)
            NC662STATE(K1) = -0.5 * NC662STATE(K1)
      END DO
C=====================================================
C     COMPUTE S`TIFFNESS
C=====================================================
      C11R = C11
      DO K1=1,NPC11
          C11R = C11R - C11*C11PRONY(K1) 
      END DO
      C12R = C12
      DO K1=1,NPC12
          C12R = C12R - C12*C12PRONY(K1) 
      END DO
      C22R = C22
      DO K1=1,NPC22
          C22R = C22R - C22*C22PRONY(K1) 
      END DO
      C23R = C23
      DO K1=1,NPC23
          C23R = C23R - C23*C23PRONY(K1) 
      END DO
      C44R = C44
      DO K1=1,NPC44
          C44R = C44R - C44*C44PRONY(K1) 
      END DO  
C     ALLOKIEREN DES STEIFIGKEITSTENSORS                                
      DO K1=1,NTENS                                                     
         DO K2=1,NTENS                                                  
            DDSDDE(K2,K1) = 0.0                                       
         END DO                                                         
      END DO
C     TENSOR F�R TRANSVERSALE ISOTROPIE  (X1=0)                       
      DDSDDE(1,1) = C11R                                              
      DDSDDE(1,2) = C12R                                              
      DDSDDE(1,3) = C12R                                              
      DDSDDE(2,1) = C12R                                              
      DDSDDE(2,2) = C22R                                              
      DDSDDE(2,3) = C23R                                              
      DDSDDE(3,1) = C12R                                              
      DDSDDE(3,2) = C23R                                              
      DDSDDE(3,3) = C22R                                              
      DDSDDE(4,4) = C44R                                              
      DDSDDE(5,5) = C44R                                              
      DDSDDE(6,6) = (C22R - C23R) / 2.0
C==================================================================================
C    UPDATE STRESSES                                
C==================================================================================
      DO K2=1,NTENS                                                     
      STRESS(K2)=ZERO
         DO K1=1,NTENS                                                     
            STRESS(K2) = STRESS(K2) + DDSDDE(K2,K1)*E(K1)                
         END DO                                                            
      END DO  
C==================================================================================
C    CALCULATION OF VISCOELASTIC CASE                               
C==================================================================================
      ELSE IF((TEMP .GE. 313.15D0) .AND. (TEMP .LE. 533.15D0)) THEN         
C TEMPERATURE AT END OF INCREMENT IN DEGREE CELSIUS
            TEND = TEMP + DTEMP - 273.15
            
      IF (TEND .GT. 208) THEN 
        AT=WLF(TEND)
      ELSE
        AT=ARRHENIUS(TEND,208)
      END IF
C==================================================================================
C    COMPUTE CREEP VARIABLES (D_IJKL IN POON)
C==================================================================================
C    NC11STATE
      DO K1=1,NPC11
            NC11STATE(K1)=RELAXATION(C11STATE(K1),C11TAU(K1),AT,DTIME,
     1                               C11,C11PRONY(K1),E(1))
      END DO
C     NC12STATE
      DO K1=1,NPC12  
            NC12STATE(K1)=RELAXATION(C12STATE(K1),C12TAU(K1),AT,DTIME,
     1                               C12,C12PRONY(K1),E(2))
      END DO      
C     NC13STATE
      DO K1=1,NPC12  
            NC13STATE(K1)=RELAXATION(C13STATE(K1),C12TAU(K1),AT,DTIME,
     1                               C12,C12PRONY(K1),E(3))
      END DO
C     NC21STATE
      DO K1=1,NPC12  
            NC21STATE(K1)=RELAXATION(C21STATE(K1),C12TAU(K1),AT,DTIME,
     1                               C12,C12PRONY(K1),E(1))
      END DO
C     NC22STATE
      DO K1=1,NPC22  
            NC22STATE(K1)=RELAXATION(C22STATE(K1),C22TAU(K1),AT,DTIME,
     1                               C22,C22PRONY(K1),E(2))
      END DO
C     NC23STATE
      DO K1=1,NPC23  
            NC23STATE(K1)=RELAXATION(C23STATE(K1),C23TAU(K1),AT,DTIME,
     1                               C23,C23PRONY(K1),E(3))
      END DO
      DO K1=1,NPC12  
            NC31STATE(K1)=RELAXATION(C31STATE(K1),C12TAU(K1),AT,DTIME,
     1                               C12,C12PRONY(K1),E(1))
      END DO      
C     NC32STATE
      DO K1=1,NPC23  
            NC32STATE(K1)=RELAXATION(C32STATE(K1),C23TAU(K1),AT,DTIME,
     1                               C23,C23PRONY(K1),E(2))
      END DO
C     NC33STATE
      DO K1=1,NPC22  
            NC33STATE(K1)=RELAXATION(C33STATE(K1),C22TAU(K1),AT,DTIME,
     1                               C22,C22PRONY(K1),E(3))
      END DO
C     NC44STATE
      DO K1=1,NPC44  
            NC44STATE(K1)=RELAXATION(C44STATE(K1),C44TAU(K1),AT,DTIME,
     1                               C44,C44PRONY(K1),E(4))
      END DO
C     NC55STATE
      DO K1=1,NPC44  
            NC55STATE(K1)=RELAXATION(C55STATE(K1),C44TAU(K1),AT,DTIME,
     1                               C44,C44PRONY(K1),E(5))
      END DO
C     NC661STATE -> STATE VARIABLE FOR C22 PART OF C66
      DO K1=1,NPC22
           NC661STATE(K1)=RELAXATION(C661STATE(K1),C22TAU(K1),AT,DTIME,
     1                                C22,C22PRONY(K1),E(6))
           NC661STATE(K1) = 0.5 * NC661STATE(K1) 
      END DO
C     C662STATE -> STATE VARIABLE FOR C23 PART OF C66 ->
      DO K1=1,NPC23
           NC662STATE(K1)=RELAXATION(C662STATE(K1),C23TAU(K1),AT,DTIME,
     1                               C23,C23PRONY(K1),E(6))
           NC662STATE(K1)= -0.5 * NC662STATE(K1)
           
      END DO
C==================================================================================
C    UPDATE STRESS
C==================================================================================
C     STRESS 1
C      print *, "STRESS: "  
C      DO K1=1,NTENS
C            print *, STRESS(K1)  
C      END DO
C      print *, "STRAN: "  
C      DO K1=1,NTENS
C            print *, STRAN(K1)  
C      END DO
C      print *, "DSTRAN: "  
C      DO K1=1,NTENS
C            print *, DSTRAN(K1)  
C      END DO
C      print *, "STRAININC: "  
C      DO K1=1,NTENS
C            print *, STRAININC(K1)  
C      END DO
C      print *, "NC11STATE: "  
C      DO K1=1,NTENS
C            print *, NC11STATE(K1)  
C      END DO
C      print *, "C11STATE: "  
C      DO K1=1,NTENS
C            print *, C11STATE(K1)  
C      END DO
      STRESS(1) = STRESS(1) + C11 * STRAININC(1) 
     1           + C12 * STRAININC(2) + C12 * STRAININC(3)
      DO K1=1,NPC11  
            STRESS(1) = STRESS(1) - (NC11STATE(K1) - C11STATE(K1))
      END DO
      DO K1=1,NPC12 
            STRESS(1) = STRESS(1) - (NC12STATE(K1) - C12STATE(K1))
      END DO
      DO K1=1,NPC12  
            STRESS(1) = STRESS(1) - (NC13STATE(K1) - C13STATE(K1))
      END DO
C     STRESS 2
      STRESS(2) = STRESS(2) + C12 * STRAININC(1) 
     1           + C22 * STRAININC(2) + C23 * STRAININC(3)
      DO K1=1,NPC12  
            STRESS(2) = STRESS(2) - (NC21STATE(K1) - C21STATE(K1))
      END DO
      DO K1=1,NPC22
            STRESS(2) = STRESS(2) - (NC22STATE(K1) - C22STATE(K1))
      END DO
      DO K1=1,NPC23 
            STRESS(2) = STRESS(2) - (NC23STATE(K1) - C23STATE(K1))
      END DO
C     STRESS 3
      STRESS(3) = STRESS(3) + C12 * STRAININC(1) 
     1            + C23 * STRAININC(2) + C22 * STRAININC(3)
      DO K1=1,NPC12  
            STRESS(3) = STRESS(3) - (NC31STATE(K1) - C31STATE(K1))
      END DO
      DO K1=1,NPC23  
            STRESS(3) = STRESS(3) - (NC32STATE(K1) - C32STATE(K1))
      END DO
      DO K1=1,NPC22
            STRESS(3) = STRESS(3) - (NC33STATE(K1) - C33STATE(K1))
      END DO
C     STRESS 4
      STRESS(4) = STRESS(4) + C44 * STRAININC(4) 
      DO K1=1,NPC44  
            STRESS(4) = STRESS(4) - (NC44STATE(K1) - C44STATE(K1))
      END DO
C     STRESS 5
      STRESS(5) = STRESS(5) + C44 * STRAININC(5) 
      DO K1=1,NPC44  
            STRESS(5) = STRESS(5) - (NC55STATE(K1) - C55STATE(K1))
      END DO
C     STRESS 6
      STRESS(6) = STRESS(6) + 0.5 * (C22 - C23) * STRAININC(6) 
      DO K1=1,NPC22
            STRESS(6) = STRESS(6) - (NC661STATE(K1) - C661STATE(K1))
      END DO
      DO K1=1,NPC23 
            STRESS(6) = STRESS(6) - (NC662STATE(K1) - C662STATE(K1))
      END DO
C==================================================================================
C     BERECHNUNG STEIFIGKEITSMATRIX
C==================================================================================
      DO K1=1,NTENS
         DO K2=1,NTENS
            DDSDDE(K1,K2) = 0.0
         END DO
      END DO
C     -----------------------
      DDSDDE(1,1) = C11
      DO K1=1,NPC11
         DDSDDE(1,1) = DDSDDE(1,1) - C11 * C11PRONY(K1) * DTIME 
     1                               / (DTIME + AT * C11TAU(K1))
      END DO
      DDSDDE(1,2) = C12
      DO K1=1,NPC12        
         DDSDDE(1,2) = DDSDDE(1,2) - C12 * C12PRONY(K1) * DTIME
     1                               / (DTIME + AT * C12TAU(K1))
      END DO
      DDSDDE(1,3) = DDSDDE(1,2)
C     -----------------------
      DDSDDE(2,1) = DDSDDE(1,2)
      DDSDDE(2,2) = C22
      DO K1=1,NPC22
         DDSDDE(2,2) = DDSDDE(2,2) - C22 * C22PRONY(K1) * DTIME
     1                               / (DTIME + AT * C22TAU(K1))
      END DO
      DDSDDE(2,3) = C23
      DO K1=1,NPC23
         DDSDDE(2,3) = DDSDDE(2,3) - C23 * C23PRONY(K1) * DTIME
     1                               / (DTIME + AT * C23TAU(K1))
      END DO
C     -----------------------
      DDSDDE(3,1) = DDSDDE(1,2)
      DDSDDE(3,2) = DDSDDE(2,3)
      DDSDDE(3,3) = DDSDDE(2,2)
C     -----------------------
      DDSDDE(4,4) = C44
      DO K1=1,NPC44
         DDSDDE(4,4) = DDSDDE(4,4) - C44 * C44PRONY(K1) * DTIME
     1                               / (DTIME + AT * C44TAU(K1))
      END DO
C     -----------------------
      DDSDDE(5,5) = DDSDDE(4,4)
C     -----------------------
      DDSDDE(6,6) = 0.5 * (DDSDDE(2,2) - DDSDDE(2,3))
      
C==================================================================================
C    CALCULATION OF STRESS OUT OF TEMPERATURE AREA (MASTERCURVE)                                    
C==================================================================================      
      ELSE IF (TEMP .LE. 313.15) THEN 
C    ALLOKIEREN DES STEIFIGKEITSTENSORS                                
         DO K1=1,NTENS                                                     
            DO K2=1,NTENS                                                  
               DDSDDE(K2,K1) = 0.0                                       
            END DO                                                         
         END DO
C     TENSOR F�R TRANSVERSALE ISOTROPIE  (X1=0)                                                              
         DDSDDE(1,1) = C11                                              
         DDSDDE(1,2) = C12                                              
         DDSDDE(1,3) = C12                                              
         DDSDDE(2,1) = C12                                              
         DDSDDE(2,2) = C22                                              
         DDSDDE(2,3) = C23                                              
         DDSDDE(3,1) = C12                                              
         DDSDDE(3,2) = C23                                              
         DDSDDE(3,3) = C22                                              
         DDSDDE(4,4) = C44                                              
         DDSDDE(5,5) = C44                                              
         DDSDDE(6,6) = (C22 - C23) / 2.0
         
C     SPANNUNGSBERECHNUNG                                              
         DO K2=1,NTENS                                                  
            DO K1=1,NTENS                                                     
               STRESS(K2) = STRESS(K2) + DDSDDE(K2,K1)*STRAININC(K1)                
            END DO                                                            
         END DO
      END IF
C==================================================================================
C    UPDATE ABAQUS STATE VARIABLE SVAR
C==================================================================================
C     C11STATE
      START = 8
      DO K1=1,NPC11
         K2= START + K1
         SVAR(K2) = NC11STATE(K1)
      END DO
C     C12STATE
      START = K2
      DO K1=1,NPC12
         K2 = START +K1
         SVAR(K2) = NC12STATE(K1)
      END DO
C     C13STATE
      START = K2
      DO K1=1,NPC12
         K2= START +K1
         SVAR(K2) = NC13STATE(K1)
      END DO
C     ---------
C     C21STATE
      START = K2
      DO K1=1,NPC12
         K2= START +K1
         SVAR(K2) = NC21STATE(K1)
      END DO
C     C22STATE
      START = K2
      DO K1=1,NPC22
         K2= START +K1
         SVAR(K2) = NC22STATE(K1)
      END DO
C     C23STATE
      START = K2
      DO K1=1,NPC23
         K2= START +K1
         SVAR(K2) = NC23STATE(K1)
      END DO
C     C31STATE   
      START = K2
      DO K1=1,NPC12
         K2= START +K1
         SVAR(K2) = NC31STATE(K1)
      END DO
C     C32STATE
      START = K2
      DO K1=1,NPC23
         K2= START +K1
         SVAR(K2) = NC32STATE(K1)
      END DO
C     C33STATE
      START = K2
      DO K1=1,NPC22
         K2= START +K1
         SVAR(K2) = NC33STATE(K1)
      END DO
C     --------
C     C44STATE
      START = K2
      DO K1=1,NPC44
         K2= START +K1
         SVAR(K2) = NC44STATE(K1)
      END DO
C     C55STATE
      START = K2
      DO K1=1,NPC44
         K2= START +K1
         SVAR(K2) = NC55STATE(K1)
      END DO
C     C661STATE, [C22 PART]
      START = K2
      DO K1=1,NPC22
         K2= START +K1
         SVAR(K2) = NC661STATE(K1)
      END DO
C     C662STATE, [C23 PART]
      START = K2
      DO K1=1,NPC23
         K2= START +K1
         SVAR(K2) = NC662STATE(K1)
      END DO  
      RETURN
      END 
C
C--------------------------
      REAL*8 FUNCTION RELAXATION(DOLD,TAU,SHIFT,TIMESTEP,STIFFNESS,
     1            PRONY,STRAIN)
      IMPLICIT NONE
      REAL*8 DOLD,TAU,SHIFT,TIMESTEP,STIFFNESS
      REAL*8 PRONY,DNEW,STRAIN,COUNTER,TEMP
      REAL*8 TOL,MAXERROR,RATEERROR
      PARAMETER (TOL=1.0D-6, MAXERROR=1.0D-7)
      RATEERROR=1.
      
C-------------------------------------------------------
C Variante 1 
C      TEMP=(1./TIMESTEP+1./(TAU*SHIFT))
C      DNEW=1/TEMP*(DOLD/TIMESTEP+(STIFFNESS*PRONY*STRAIN)/
C     1      (TAU*SHIFT))
C-------------------------------------------------------
C  Variante 2
        DNEW=(DOLD * TAU * SHIFT +
     1       TIMESTEP * STIFFNESS*PRONY * STRAIN) /
     2       (TIMESTEP + TAU * SHIFT)
C
      RELAXATION=DNEW
      END FUNCTION

      
      REAL*8 FUNCTION WLF(TEMP)
C THIS FUNCTION RETURNS THE SHIFTFACTOR "AT" CALCULATED VIA THE WLF-FUNCTION
C                     -C1*(TEMP-TREF)
C           LOG(AT)= -----------------------
C                      C2 +(T-TREF)
C INPUT
C TEMP - CURRENT TEMPERATURE
C OUTPUT 
C AT-  SHIFT VALUE
      IMPLICIT NONE
      REAL*8 TEMP,C1,C2,TREF, SHIFTFACTOR
      REAL*8 ONE,TEN
      PARAMETER (C1=33.6882076930474D0, C2=191.84704607102D0)
      PARAMETER (TREF=208.0D0, TEN=10.0D0)
      TEMP=TEMP  !XXX TEMPERATURE IN �C
      SHIFTFACTOR=(-C1*(TEMP-TREF))/(C2+(TEMP-TREF))
      WLF=TEN**SHIFTFACTOR
      END FUNCTION

      
      REAL*8 FUNCTION ARRHENIUS(TEMP,TG)
C THIS FUNCTION RETURNS THE SHIFTFACTOR "AT" CALCULATED VIA THE ARRHENIUS
C                     EA       1         1
C           LOG(AT)=  -- * ( ----   -   ---  )
C                     R      TEMP       TG
C INPUT
C TEMP - CURRENT TEMPERATURE
C TG   - CURRENT GLAS TRANSITION TEMPERATURE
C OUTPUT 
C AT-  SHIFT VALUE
      IMPLICIT NONE
      REAL*8 TEMP,EAR,TG,SHIFTFACTOR
      REAL*8 ONE,TEN     
      PARAMETER (EAR=7599.28591038467D0)
      PARAMETER (ONE=1.0D0, TEN=10.0D0)
      
      TEMP=TEMP!XXX TEMPERATURE IN �C
      SHIFTFACTOR=EAR*(ONE/(TEMP+273.15)-ONE/(340.36+273.15))
      
      ARRHENIUS=TEN**SHIFTFACTOR
      END FUNCTION
      