variables: &globals
  GIT_STRATEGY: clone
  GIT_SSL_CAINFO: /etc/ssl/certs/ca-certificates.crt
  DOCKER_DRIVER: overlay2
  DOCKER_LANG: en_US.UTF-8
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_AUTH_CONFIG: '{ "auths": { "$CI_REGISTRY": { "auth": "$GIT_AUTH" }, "https://index.docker.io/v1/": { "auth": "$DOCKER_AUTH" }}}'
  FF_ENABLE_BASH_EXIT_CODE_CHECK: 1

stages:
  - build
  - deploy

build_job:
  allow_failure: true
  stage: build
  image: docker
  variables: 
    CI_IMAGE: $CI_REGISTRY/hess_ja/pycodac/conda:latest
  # Add to get Docker-in-Docker capabilities
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t peridigm .
    - docker run peridigm /opt/cmake/bin/ctest -T Test --test-dir /peridigm/build || true
    - CONTAINERNAME=$(docker ps -a --format "{{.Names}}")
    - docker cp $CONTAINERNAME:/peridigm/build/Testing Testing
  artifacts:
    paths:
      - Testing
    expire_in: 1 day


# build_job:
#   tags:
#     - wsl
#   stage: build  
#   # only:
#   #   - tags
#   script:
#     - echo "building..."
#     - mkdir build
#     - cd build
#     - echo $CI_PROJECT_DIR
#     - cmake .. -D CMAKE_BUILD_TYPE:STRING=Release
#       -D Trilinos_DIR:PATH=/usr/local/bin/trilinos/lib/cmake/Trilinos/
#       -D CMAKE_C_COMPILER:STRING=/usr/local/lib/openmpi/bin/mpicc
#       -D CMAKE_CXX_COMPILER:STRING=/usr/local/lib/openmpi/bin/mpicxx
#       -D BOOST_ROOT=/usr/local/lib/boost/
#       -D CMAKE_CXX_FLAGS:STRING="-O2 -Wall -std=c++11 -pedantic -Wno-long-long -ftrapv -Wno-deprecated"
#     - cmake --build . -j 10
#   artifacts:
#     paths:
#       - build
#     expire_in: 1 day

# test_job:
#   tags:
#     - wsl
#   stage: test
#   only:
#     - tags
#   before_script:
#     - echo "testing..."
#     - cd $CI_PROJECT_DIR/build
#     - ctest -T Test
#   script:
#     - echo "testing finished"
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#       - build/Testing
#     expire_in: 1 day
#   dependencies:
#     - build_job

deploy_job:
  stage: deploy
  script:
    # - cd $CI_PROJECT_DIR/
    - apk add libxslt
    - ls
    - xsltproc $CI_PROJECT_DIR/scripts/CTest2JUnit.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml > JUnitTestResults.xml
  artifacts:
    when: always
    reports:
      junit: JUnitTestResults.xml
  dependencies:
    - build_job
